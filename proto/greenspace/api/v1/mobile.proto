syntax = "proto3";

package hoguera.platform.greenspace.api.v1;

option go_package = "github.com/areugoh/client-go/greenspace/api/v1;mobile";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";


// GreenSpace is the service that provides all the information for NASA's GreenSpace app.
service GreenSpace {
    // GetAnimals returns the animals that are in danger in the coast as a stream.
    rpc GetAnimals(AnimalsRequest) returns (stream Animal) {};
    // GetCoast returns the nearest coast to the user location.
    rpc GetCoast(CoastRequest) returns (CoastResponse) {};
    // GetLocation returns the location of the user.
    rpc GetLocation(LocationRequest) returns (LocationResponse) {};

    // GetV1 is the BFF endpoint. It returns the location of the user, the nearest coast and the animals in danger.
    rpc GetV1(google.protobuf.Empty) returns (V1Response) {
        option (google.api.http) = {
            get: "/api/v1"
        };
    };
}

// Location
message LocationResponse {
    float longitude = 1;
    float latitude = 2;
    // The name of the location. e.g. "San Sebastian"
    string name = 3;
}

// LocationRequest the IP of the user is required to get the location.
message LocationRequest {
    string ip = 1;
}

// Condition, the condition of the water. In house algorithm to define the condition.
enum Condition {
    GOOD = 0;
    MODERATE = 1;
    CONTAMINATED = 2;
    UNKNOWN = 3;
    RADIATION = 4;
    DANGER = 5;
    PROTECTED = 6;
}

// CoastRequest the user location is required to get the nearest coast.
message CoastRequest {
    LocationResponse location = 1;
}

// CoastResponse the nearest coast to the user location.
message CoastResponse {
    // The name of the coast. e.g. "Playa de la Concha"
    string name = 1;
    // The condition of the water. e.g. "GOOD"
    Condition condition = 2;
    // The temperature of the water in Celsius. e.g. 20
    float temperature = 3;
    // The distance in kilometers to the coast. e.g. 4.1
    double distance = 4;
}

// Animals the animals that are in danger in the coast.
message Animal {
    string name = 1;
    bool in_danger = 2;
    string description = 3;
}

// AnimalsRequest the user location is required to get the nearest animals living in the coast.
message AnimalsRequest {
    LocationResponse location = 1;
}

// V1Response the response of the V1 endpoint. It contains the location of the user, the nearest coast and the animals
// in danger. It serves as a wrapper for the other responses. It is used to avoid multiple requests to the API and
// follow the BFF pattern.
message V1Response {
    LocationResponse location = 1;
    CoastResponse nearest_aquatic_location = 2;
    repeated Animal animals = 3;
}
